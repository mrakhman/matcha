events {}

http {
  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  upstream ws {
    server ws:8888;
  }

  upstream api {
    server backend:5000;
  }

  upstream minio {
    server minio:9000;
  }

  server {
    include             mime.types;
    server_name         matchaaa.tk;
    root                /app;

    listen              443 ssl http2;
    listen              [::]:443 ssl http2;

    ssl_certificate     /etc/letsencrypt/live/matchaaa.tk/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/matchaaa.tk/privkey.pem;

    location ~ ^/ws(/?)(.*)$ {
      proxy_pass          http://ws/$2$is_args$args;
      proxy_http_version  1.1;
      proxy_set_header    Upgrade $http_upgrade;
      proxy_set_header    Connection "Upgrade";
      proxy_read_timeout  86400;
    }

    location ~ ^/api(/?)(.*)$ {
      proxy_pass        http://api/$2$is_args$args;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  X-Real-IP $remote_addr;
    }

    location ~ ^/minio(/?)(.*)$ {
      proxy_pass        http://minio/minio/$2$is_args$args;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  Host $http_host;
    }

    location / {
      try_files $uri $uri/ @rewrites;
    }

    location @rewrites {
      rewrite ^(.+)$ /index.html last;
    }

    location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
      # Some basic cache-control for static files to be sent to the browser
      expires max;
      add_header Pragma public;
      add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

  }

  server {
    listen          80;
    listen          [::]:80;
    server_name     matchaaa.tk;
    rewrite ^       https://matchaaa.tk$request_uri? permanent;
  }

  server {
    listen          80;
    listen          [::]:80;
    server_name     storage.matchaaa.tk;
    rewrite ^       https://storage.matchaaa.tk$request_uri? permanent;
  }

  server {
    server_name         storage.matchaaa.tk;

    listen              443 ssl http2;
    listen              [::]:443 ssl http2;

    ssl_certificate     /etc/letsencrypt/live/matchaaa.tk/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/matchaaa.tk/privkey.pem;
    
    # To allow special characters in headers
    ignore_invalid_headers off;
    # Allow any size file to be uploaded.
    # Set to a value such as 1000m; to restrict file size to a specific value
    client_max_body_size 0;
    # To disable buffering
    proxy_buffering off;

    location / {
     proxy_http_version 1.1;
     proxy_set_header Host $http_host;
     # proxy_ssl_session_reuse on; # enable this if you are internally connecting over SSL
     proxy_read_timeout 15m; # Default value is 60s which is not sufficient for MinIO.
     proxy_send_timeout 15m; # Default value is 60s which is not sufficient for MinIO.
     proxy_request_buffering off; # Disable any internal request bufferring.
     proxy_pass http://minio;
    }
  }
}
